<resources>
    <!-- Define device configs on boot -->
    <string-array name="global_device_configs_override" translatable="false">
    </string-array>
    <string-array name="device_configs_override" translatable="false">
    </string-array>

    <!-- Display color inversion availability -->
    <bool name="config_displayInversionAvailable">true</bool>

    <!-- The list of components which should be automatically disabled for a specific device.
         Note: this MUST not be used to randomly disable components, ask for approval first! -->
    <string-array name="config_deviceDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be automatically disabled for all devices. -->
    <string-array name="config_globallyDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be forced to be enabled. -->
    <string-array name="config_forceEnabledComponents" translatable="false">
    </string-array>

    <!-- The list of package IDs that are allowed to use aux cameras.
         NOTE: If this list is empty then all apps will be able to use aux cameras. -->
    <string-array name="config_cameraAuxPackageAllowList" translatable="false" />

    <!-- The list of package IDs that are not allowed to use aux cameras. -->
    <string-array name="config_cameraAuxPackageExcludeList" translatable="false" />

    <!-- The list of package IDs that are allowed to skip camera high frame rate checks. -->
    <string-array name="config_cameraHFRPrivAppList" translatable="false" />

    <!-- Paths to the libraries that contain device specific key handlers -->
    <string-array name="config_deviceKeyHandlerLibs" translatable="false">
    </string-array>

    <!-- Names of the key handler classes -->
    <string-array name="config_deviceKeyHandlerClasses" translatable="false">
    </string-array>

    <!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveBatteryLed">@bool/config_intrusiveNotificationLed</bool>

    <!-- Whether to cleanup fingerprints upon connection to the daemon and when user switches -->
    <bool name="config_cleanupUnusedFingerprints">true</bool>

    <!-- Whether to cancel fingerprint operation if not idle -->
    <bool name="config_fpCancelIfNotIdle">false</bool>

    <!-- Expected value from fast charging status file  -->
    <string name="config_oemFastChargerStatusValue" translatable="false"></string>

    <!-- Build properties from a GMS certified device against current platform SPL level -->
    <string-array name="config_certifiedBuildProperties" translatable="false">
      <!--
        Each entry must be of the format
            FIELD:value
        with the field belonging to android.os.Build or android.os.Build.VERSION class.
        Example:
        <item>BRAND:foo</item>
        <item>DEVICE:bar</item>
        <item>FINGERPRINT:foo/bar/bar:1.0/lorem/ipsum:dolor/sit-amet</item>
        <item>VERSION.RELEASE:1.0</item>
      -->
    </string-array>

    <!-- Build fingerprint from stock ROM -->
    <string name="config_stockFingerprint" translatable="false"></string>

    <!-- Device model (Build.MODEL) to spoof for netflix, if not empty -->
    <string name="config_netflixSpoofModel" translatable="false"></string>

    <!-- Whether to spoof device as pixel for certain google apps, to
         unlock pixel-exclusive features -->
    <bool name="config_spoofGoogleApps">true</bool>

    <!-- Whether to spoof GMS as Pixel Tablet -->
    <bool name="config_spoofasTablet">false</bool>

    <!-- Whether to use Richtap vibration -->
    <bool name="config_usesRichtapVibration">false</bool>

    <!-- Should we listen for fingerprints when the screen is off?  Devices
         with a rear-mounted sensor want this, but certain devices have
         the sensor embedded in the power key and listening all the time
         causes a poor experience. -->
    <bool name="config_fingerprintWakeAndUnlock">true</bool>

    <!-- Whether device has an alert slider. -->
    <bool name="config_hasAlertSlider">false</bool>

    <!-- Whether charging control should be enabled by default -->
    <bool name="config_chargingControlEnabled">false</bool>

    <!-- Default charging control mode.
         This integer should be set to:
         1 - auto - Use the alarm to calculate the time range when to activate charging control
         2 - custom - Use time range when the device is usually charging for hours
         3 - limit - Just limit charging -->
    <integer name="config_defaultChargingControlMode">1</integer>

    <!-- Default time when charging control is activated.
         Represented as seconds from midnight (e.g. 79200 == 10pm). -->
    <integer name="config_defaultChargingControlStartTime">79200</integer>

    <!-- Default time when battery will be fully charged.
         Represented as seconds from midnight (e.g. 21600 == 6am). -->
    <integer name="config_defaultChargingControlTargetTime">21600</integer>

    <!-- Default charging limit. -->
    <integer name="config_defaultChargingControlLimit">80</integer>

    <!-- Considering the fact that the system might have an incorrect estimation of the time to
         full. Set a time margin to make the device fully charged before the target time arrives.
         The unit is minutes and the default value is 30 minutes. If you find that it is not enough
         to make the device to be fully charged at the target time, increase the value
    -->
    <integer name="config_chargingControlTimeMargin">30</integer>

    <!-- For a device that cannot bypass battery when charging stops (that is, the battery current
         is 0mA when charging stops), the battery will gradually discharge. So we need to make it
         recharge when the battery level is lower than a threshold. Set this so that the device
         will be charged between (limit - val) and limit. -->
    <integer name="config_chargingControlBatteryRechargeMargin">10</integer>

    <!-- Default values for LiveDisplay -->
    <bool name="config_enableLiveDisplay">true</bool>
    <integer name="config_dayColorTemperature">6500</integer>
    <integer name="config_nightColorTemperature">4800</integer>
    <integer name="config_outdoorAmbientLux">12000</integer>
    <integer name="config_outdoorAmbientLuxHysteresis">1500</integer>
    <integer name="config_defaultLiveDisplayMode">2</integer>

    <!-- These values should map to the true min and max
        that the backend is capable of adjusting to. This
        is more important when using the ColorBalance mode,
        as the discrete adjustment is interpolated between
        this range (with config_dayColorTemperature at zero) -->
    <integer name="config_minColorTemperature">1000</integer>
    <integer name="config_maxColorTemperature">10000</integer>

    <bool name="config_defaultAutoContrast">false</bool>
    <bool name="config_defaultAutoOutdoorMode">true</bool>
    <bool name="config_defaultColorEnhancement">true</bool>
    <bool name="config_defaultCABC">true</bool>
    <bool name="config_defaultAntiFlicker">false</bool>

    <!-- Display mode remapping table.
        If the mode names returned by the backend do not match
        the predefined and translated strings in the Settings
        app, they can be remapped here. The format is
        "oldname:newname", one per entry. -->
    <string-array name="config_displayModeMappings" translatable="false" />

    <!-- Should we filter any display modes which are unmapped? -->
    <bool name="config_filterDisplayModes">false</bool>

    <!-- Button backlight control. Possible values are:
            0 - Not supported
            1 - Supported, but only on/off mode
            2 - Supported with variable brightness control
    -->
    <integer name="config_deviceSupportsButtonBrightnessControl">0</integer>
    <dimen name="config_buttonBrightnessSettingDefaultFloat">1.0</dimen>

    <!-- Keyboard backlight control. Possible values are:
            0 - Not supported
            1 - Supported, but only on/off mode
            2 - Supported with variable brightness control
    -->
    <integer name="config_deviceSupportsKeyboardBrightnessControl">0</integer>
    <dimen name="config_keyboardBrightnessSettingDefaultFloat">1.0</dimen>

    <!-- Whether device can force navbar disabling -->
    <bool name="config_canForceDisableNavigationBar">false</bool>

    <!-- Hardware keys present on the device, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
            32 - Camera
            64 - Volume rocker
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareKeys">64</integer>

    <!-- Hardware keys present on the device with the ability to wake, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
            32 - Camera
            64 - Volume rocker
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareWakeKeys">64</integer>

    <!-- Control the behavior when the user long presses the home button.
         This needs to match the enums in
         frameworks/base/core/java/com/android/internal/util/custom/hwkeys/DeviceKeysConstants.java.
    -->
    <integer name="config_longPressOnHomeBehavior">3</integer>

    <!-- Control the behavior when the user double-taps the home button.
         This needs to match the enums in
         frameworks/base/core/java/com/android/internal/util/custom/hwkeys/DeviceKeysConstants.java.
    -->
    <integer name="config_doubleTapOnHomeBehavior">0</integer>

    <!-- Control the behavior when the user long presses the menu button.
         This needs to match the enums in
         frameworks/base/core/java/com/android/internal/util/custom/hwkeys/DeviceKeysConstants.java.
    -->
    <integer name="config_longPressOnMenuBehavior">2</integer>

    <!-- Control the behavior when the user long presses the app switch button.
         This needs to match the enums in
         frameworks/base/core/java/com/android/internal/util/custom/hwkeys/DeviceKeysConstants.java.
    -->
    <integer name="config_longPressOnAppSwitchBehavior">0</integer>

    <!-- Indicates that the device has Single-stage Camera key
         (without "Focus" state) instead of Dual-stage. -->
    <bool name="config_singleStageCameraKey">false</bool>

</resources>
